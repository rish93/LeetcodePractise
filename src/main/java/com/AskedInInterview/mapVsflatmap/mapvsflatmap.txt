Both map and flatMap can be applied to a Stream<T> and they
both return a Stream<R>. The difference is that the map operation
produces one output value for each input value, whereas the flatMap
operation produces an arbitrary number (zero or more) values for each input value.
This is reflected in the arguments to each operation.
The map operation takes a Function, which is called for each
value in the input stream and produces one result value, which is sent to the output stream.
The flatMap operation takes a function that conceptually wants
to consume one value and produce an arbitrary number of values. However,
in Java, it's cumbersome for a method to return an arbitrary number of
values, since methods can return only zero or one value. One could imagine
an API where the mapper function for flatMap takes a value and returns an
array or a List of values, which are then sent to the output. Given that
this is the streams library, a particularly apt way to represent an arbitrary
number of return values is for the mapper function itself to return a stream! The
values from the stream returned by the mapper are drained from the stream and are
passed to the output stream. The "clumps" of values returned by each call to the
mapper function are not distinguished at all in the output stream, thus the
output is said to have been "flattened."
Typical use is for the mapper function of flatMap to return Stream.empty()
if it wants to send zero values, or something like Stream.of(a, b, c) if it
 wants to return several values. But of course any stream can be returned.

@Test
public void convertStringToUpperCaseStreams() {
    List<String> collected = Stream.of("a", "b", "hello") // Stream of String
            .map(String::toUpperCase) // Returns a stream consisting of the results
             of applying the given function to the elements of this stream.
            .collect(Collectors.toList());
    assertEquals(asList("A", "B", "HELLO"), collected);
}
Nothing special in the first example, a Function is applied to return the String in uppercase.

Second example making usage of flatMap:

@Test
public void testflatMap() throws Exception {
    List<Integer> together = Stream.of(asList(1, 2), asList(3, 4)) // Stream of List<Integer>
            .flatMap(List::stream)
            .map(integer -> integer + 1)
            .collect(Collectors.toList());
    assertEquals(asList(2, 3, 4, 5), together);
}
In the second example, a Stream of List is passed. It is NOT a Stream of Integer!
If a transformation Function has to be used (through map), then first the Stream has to
 be flattened to something else (a Stream of Integer).
If flatMap is removed then the following error is returned: The operator + is undefined
 for the argument type(s) List, int.
It is NOT possible to apply + 1 on a List of Integers!
