


fgango 4
educative.io

tinyurl design
Binary tree greedy merge graph

join query
--------------------------------------------------------------------------------

git remote add origin https://github.com/rish93/protobufsession-30102020.git
git push -u origin main

git push --set-upstream origin master


//***********************************************************************************************************************************
what is @Qualifier
   A: if more than one bean of the same type is available in the container,
      the framework will throw NoUniqueBeanDefinitionException

    If we try to load FooService into our context, the Spring framework will throw a NoUniqueBeanDefinitionException
    The @Qualifier is used to resolve ambiguous dependencies i.e, it helps @Autowired annotations to choose one of the dependency.
    If there are multiple implementations for single interface then we can use @Qualifier to choose required implementation at runtime.
        @Component("fooFormatter")
        public class FooFormatter implements Formatter {

            public String format() {
                return "foo";
            }
        }`

    @Component("barFormatter")
    public class BarFormatter implements Formatter {

        public String format() {
            return "bar";
        }
    }

    //below will throw NoUniqueBeanDefinitionException
    @Component
    public class FooService {

        @Autowired
        private Formatter formatter;
    }

    //hence define @Qualifier for same bean

    @Component
    @Qualifier("fooFormatter")
    public class FooFormatter implements Formatter {
        //...
    }

    @Component
    @Qualifier("barFormatter")
    public class BarFormatter implements Formatter {
        //...
    }

//use like
public class FooService {

    @Autowired
    @Qualifier("fooFormatter")
    private Formatter formatter;
}

//***********************************************************************************************************************************


// How to handle pagiation

public class RestApi {
//how to handle pagination
    @GetMapping(path = "/{projectId}")
    @PagedResponseBody
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "id", dataType = "string", paramType = "query"),
            @ApiImplicitParam(name = "searchText", value = "searchText", dataType = "string", paramType = "query")
    })
    @ApiOperation(value = "It fetches all filtered mappings id.")
    public Page<MappingTool> getMappings(Pageable pageable, @PathVariable(name = "projectId") Long projectId,
                                     @ApiIgnore @FilterParam Filter filter, Locale locale) {

        return mappingService.getMappings(pageable, projectId, filter, locale);
    }

    ---------->
    service.clss
    public Page<MappingTool> getMappings(Pageable pageable, Long projectId, Filter filter, Locale locale) {

        List<MappingTool> mappings = new ArrayList<>();
        if (filter.containsKey(Constants.ID)) {
            Long id = Long.parseLong(String.valueOf(filter.get(Constants.ID).get(0)));
            MappingMappingTool MappingTool = MappingToolRepository.getMappingByIdAndProjectId(projectId, id);
            if (null != MappingTool && !MappingTool.isActive()) {
                throw new DataException(MappingTool.getStmSourceData().getId().toString(),
                "MappingTool not found for the source id: " + MappingTool.getStmSourceData().getId());
            }
            MappingTool MappingTool = getMappingTool(pageable, locale, MappingTool);
            MappingToolList.add(MappingTool);
            return new PageImpl<>(MappingToolList, pageable, MappingToolList.size());
        } else {
            return buildMappingListForProject(projectId, filter, locale, pageable);
        }
    }

    --------------------------------------------------------------------->

    @Repository
    public interface MappingRepository extends JpaRepository<STMMapping, Long> {

        @Query("from MappingTool s where s.stmSourceData.id = :sourceDataId")
        STMMapping getMappingToolBySourceDataId(@Param("sourceDataId") Long sourceDataId);

        @Query(value = "select * from MappingTool sm join source_data ssd on source_data_id = ssd.id and ssd.is_mapped = true where sm.is_active = :active
        and sm.project_id = :projectId order by sm.updated_on desc", nativeQuery = true)
        Page<Mapping> getAllMappingToolForActiveProjectId(@Param("active") Boolean isActive, @Param("projectId") Long projectId, Pageable pageable);
}
}

//**************************************************************************************************************************************

can we use request mapping at class level in spring ? A. yes
@Controller
@RequestMapping("/login")
public class LoginController {

    @RequestMapping("/")
    public String loginRoot() {
        return "login";
    }

    @RequestMapping(value="/error", method=RequestMethod.GET)
    public String loginError() {
        return "login-error";
    }

}


------------------------------------------------------------------------------------------------------------

With Java 8, int[] can be converted to Integer[] easily:

int[] data = {1,2,3,4,5,6,7,8,9,10};

// To boxed array
Integer[] what = Arrays.stream( data ).boxed().toArray( Integer[]::new );
Integer[] ever = IntStream.of( data ).boxed().toArray( Integer[]::new );

// To boxed list
List<Integer> you  = Arrays.stream( data ).boxed().collect( Collectors.toList() );
List<Integer> like = IntStream.of( data ).boxed().collect( Collectors.toList() );
As others stated, Integer[] is usually not a good map key. But as far as conversion goes, we now have a relatively clean and native code.\\

------------------------------------------------------------------------------------------------------------------

The List returned by Arrays.asList method of java.util.Arrays class is a fixed-size list object which means that elements cannot be added
to or removed from the list.

So functions like Adding or Removing cannot be operated on such kind of Lists.

The solution to adding or removing without getting java.lang.UnsupportedOperationException is ->
List<String> strList= new ArrayList<>(Arrays.asList(strs));

//Then Add or Remove can be called on such List

newList.add("100");
newList.remove("100");

------------------------------------------------------------------------------------------------------------


You need to use HAVING, not WHERE.

* where clause cannot be used with aggregates, but the having clause can.
* WHERE prior to GROUP BY and HAVING after GROUP BY. The Where clause acts as a pre filter where as Having as a post filter.

The difference is: the WHERE clause filters which rows MySQL selects. Then MySQL groups
the rows together and aggregates the numbers for your COUNT function.

HAVING is like WHERE, only it happens after the COUNT value has been computed, so it'll work as you expect. Rewrite your subquery as:

(                  -- where that pid is in the set:
SELECT c2.pid                  -- of pids
FROM Catalog AS c2             -- from catalog
WHERE c2.pid = c1.pid
HAVING COUNT(c2.sid) >= 2)


------------------------------------------------------------------
Nth highest salary

CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  RETURN (
      # Write your MySQL query statement below.
     SELECT MIN(Salary) from (
        SELECT Salary from Employee emp ORDER BY emp.Salary DESC LIMIT N
        ) AS emp


  );
END

------------------------------------------------------------------------------------------------------------------------------------
Ascii of a is 97
Ascii of A is 65


GIven clock of alphabets between A-Z get ting string as input and number key.
Decrypt by subtracting key to alphabets

// Java program to move every character
// K times ahead in a given string

class GFG {

// Function to move string character
	static void encode(String s, int k) {

		// changed string
		String newS = "";

		// iterate for every characters
		for (int i = 0; i < s.length(); ++i) {
			// ASCII value
			int val = s.charAt(i);
			// store the duplicate
			int dup = k;

			// if k-th ahead character exceed 'z'
			if (val + k > 122) {
				k -= (122 - val);
				k = k % 26;

				newS += (char)(96 + k);
			} else {
				newS += (char)(val + k);
			}

			k = dup;
		}

		// print the new string
		System.out.println(newS);
	}

// Driver Code
	public static void main(String[] args) {
		String str = "abc";
		int k = 28;

		// function call
		encode(str, k);
	}
}


------------------------------------------------------------------------------------------------------------------------------------

In as sentence arrange word based on it's length with speacial character at first
------------------------------------------------------------------------------------------------------------------------------------

In a word get last two alphabets, reveres and append to first
Apple

el App



-------------------------------------------------

Q: What do you mean by polymorphism?
A: polymorphism is the ability by which, we can create functions
    or reference variables which behaves differently in different programmatic context.

    Polymorphism in Java
    An example of polymorphism is referring the instance of subclass, with reference variable of super-class. e.g.

    Object o = new Object(); //o can hold the reference of any subtype
    Object o = new String();
    Object o = new Integer();
    Here, String is subclass of Object class. This is basic example of polymorphism.

    Compile time polymorphism (static binding or method overloading)
    Runtime polymorphism (dynamic binding or method overriding)
    Compile Time Polymorphism (static binding or method overloading)
    As the meaning is implicit, this is used to write the program in such a way, that flow of control is decided in compile time itself. It is achieved using method overloading.

    In method overloading, an object can have two or more methods with same name, BUT, with their method parameters different. These parameters may be different on two bases:

    Parameters type
    Type of method parameters can be different. e.g. java.util.Math.max() function comes with following versions:

    public static double Math.max(double a, double b){..}
    public static float Math.max(float a, float b){..}
    public static int Math.max(int a, int b){..}
    public static long Math.max(long a, long b){..}
    The actual method to be called is decided on compile time based on parameters passed to function in program.

    Parameters count
    Functions accepting different number of parameters. e.g. in employee management application, a factory can have these methods:

    EmployeeFactory.create(String firstName, String lastName){...}
    EmployeeFactory.create(Integer id, String firstName, String lastName){...}
    Both methods have same name “create” but actual method invoked will be based on parameters passed in program.

    Runtime Polymorphism (dynamic binding or method overriding)
    Runtime polymorphism is essentially referred as method overriding. Method overriding is a feature which you get when you implement inheritance in your program.

    A simple example can be from real world e.g. animals. An application can have Animal class, and its specialized sub classes like Cat and Dog. These subclasses will override the default behavior provided by Animal class + some of its own specific behavior.

    public class Animal {
        public void makeNoise()
        {
            System.out.println("Some sound");
        }
    }

    class Dog extends Animal{
        public void makeNoise()
        {
            System.out.println("Bark");
        }
    }

    class Cat extends Animal{
        public void makeNoise()
        {
            System.out.println("Meawoo");
        }
    }
    Now which makeNoise() method will be called, depends on type of actual instance created on runtime e.g.

    public class Demo
    {
        public static void main(String[] args) {
            Animal a1 = new Cat();
            a1.makeNoise(); //Prints Meowoo

            Animal a2 = new Dog();
            a2.makeNoise(); //Prints Bark
        }
    }

Explain virtual inheritance.
What do you mean by semaphore?
 A:   A semaphore controls access to a shared resource through the use of a counter. If
    the counter is greater than zero, then access is allowed. If it is zero, then access is denied.
     What the counter is counting are permits that allow access to
    the shared resource. Thus, to access the resource, a thread must be granted a permit from the semaphore.
class1{
 Semaphore sem = new Semaphore(1);

        // creating two threads with name A and B
        // Note that thread A will increment the count
        // and thread B will decrement the count
        MyThread mt1 = new MyThread(sem, "A");
        MyThread mt2 = new MyThread(sem, "B");
}
class MyThread extends Thread
{
    Semaphore sem;
    String threadName;
    public MyThread(Semaphore sem, String threadName)
    {
        super(threadName);
        this.sem = sem;
        this.threadName = threadName;
    }

    @Override
    public void run() {

        // run by thread A
        if(this.getName().equals("A"))
        {
            System.out.println("Starting " + threadName);
            try
            {
                // First, get a permit.
                System.out.println(threadName + " is waiting for a permit.");

                // acquiring the lock
                sem.acquire();
                }
                }

Q: What is recursion? Can you implement it?
 A:   The process in which a function calls itself directly or indirectly is
    called recursion and the corresponding function is called as recursive function.
    int fact(int n)
    {
        if (n < = 1) // base case
            return 1;
        else
            return n*fact(n-1);
    }

Q: Give an example that shows the use of enumeration data types.
A: Enumerations serve the purpose of representing a group of named constants in a
    programming language. For example the 4 suits in a deck of playing cards
    may be 4 enumerators named Club, Diamond, Heart, and Spade, belonging to an
    enumerated type named Suit

    Enum declaration can be done outside a Class or inside a Class but not inside a Method.

    // A simple enum example where enum is declared
    // outside any class (Note enum keyword instead of
    // class keyword)
    enum Color
    {
        RED, GREEN, BLUE;
    }

    public class Test
    {
        // Driver method
        public static void main(String[] args)
        {
            Color c1 = Color.RED;
            System.out.println(c1);
        }
    }
    O/p RED

Q: Big O of hash map, How to use a select query in sql, how to  use the join tables in sql.
A: Using hashCode to locate the corresponding bucket [inside buckets container model].
    Each bucket is a list (or tree starting from Java 8) of items residing in that bucket.
    The items are scanned one by one, using equals for comparison.
    When adding more items, the HashMap is resized once a certain load percentage is reached.
    So, sometimes it will have to compare against a few items, but generally, it's much closer to O(1) than O(n).
    For practical purposes, that's all you should need to know.


Write the code for a problem and write as many unit test cases as possible.

Programming question - Given an array of number from 1...N (No duplicates)out of which one number is missing. Find the missing number in O(N).
How to compile & execute code at run time in java?
Some question based on topological sort
Level order traversal of tree
A question based on Dijkstra's algorithm

Hash map vs Concurrent hash map
Internal implementation of hash map

3. Spiral Traversal Of Binary Tree

4. Reverse Spiral Traversal of Binary Tree
1. Explain project in detail

2. Delete node without head pointer

3. Print all paths of Binary Tree

4. Convert Binary tree to Mirror tree

5. Fizz buzz printing
Write an efficient program which takes an input argument say n. Start from number 1 to n (inclusive) and if number is multiple of 3 then print “Fizz”, if number is multiple of 5 then print “Buzz”, if number is multiple of both 3 and 5 then print “FizzBuzz”. The interviewer was looking for code with just two ‘IF’ statements.


1. Usage of synchronize keyword

2. Find graph type from given coordinates
Here we are given 4 types of graphs and we have an API which takes co-ordinates say (x1, y1) and (x2, y2). Everytime the API is invoked it would return the next coordinate in the plane. We have to find the type of graph with minimum number of API invocation.
Graph Types were Strictly increasing line, Strictly decreasing line, Increasing then Decreasing plane and Decreasing and Increasing plane.

3. Explain Singleton design pattern

4. Explain Factory design pattern

1. Dynamic Dispatcher
2. Atomic keyword and volatile keyword
3. Externalizable interface
4. Having a method definition inside an interface but java version is 1.7 hence default shouldn’t be used.
5. Usage of try with resource block
6. Difference between upcasting and downcasting and when we should use them.
7. Creating thread without using thread class and runnable interface
8. Shutdown hook
9. 5 features in Java 1.8 and 1.9
10. Executor Pool vs Thread Join Pool
11. There are 3 threads running independently how to ensure 1st thread runs more

----------------------------------------------------------------------
Hibernate with one table having multiple referece to another table

https://stackoverflow.com/questions/22954787/hibernate-with-two-foreign-keys-from-same-table-annotation


----------------------------------------------------------------------





----------------------------------------------------------------------
DESIGN PATTERN

https://refactoring.guru/design-patterns/java

---------------------------------------------------------------------------------

1st week------->
Java+ Spring Boot + Rest+SQL+ aur iske aaju baju wale maven,gradle,git blah blah

2nd Week--->
Java 8, 9 , 11 features and questions + Spring Cloud (Java Brain 3 playlist)+ Java Tricky questions(Singleton use case, prototype example callig inner class from another inner class etc.....)

3rd Week--->
Docker Therory+ Kubernetes Theory+ Java Design Pattern (Important Ones only with example rest bas upar upar se)

4th Week---->
Ab DS Algo me toot pado + Kubernetes commands+ git pipeline+ multiple microservice interaction pratical+docer practical etc..



------------------------------------------------------------------

Creating a dashboard to display monitors.

Design a video sharing/ streaming application

Solve a word parsing and counting problem using coderpad which is difficult to use.




------------------------------------------------------------------


Mphasis

Can null key accepted in hashmap then how to get it's null key value
Left join example
Microservice Design architecture used (service discovery etc)
Can overridedn method have differetn throw Exception syntax
How to hanle out of memory _-> increase heap size and prefer streaming output thrn holding in variable



UNI orbit

kth largest element
https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array/


binary search
find in sorted arrya





Find Kth largest element in an unsorted array


public class ArraySolution{

	public static void main(String[] args){

      List<Integer> testList = Lit.of(2,23,21,1);
      Collections.sort(testList);


     System.out.print ( testList.get(k));

  }





}


Find Search element(X) in Rotated Sorted Array


[ 7, 8, 9, 1, 2, 5, 6]



[10, 20, 30, 35, 40, 55, 59, 63]
35_> ->   -> 35

Manhattan


1. How to define a class as Immutable ? Also how to use a hashmap inside an immutable class?
2. Reverse a linked list.
3. WAP to find the given string is the rotation of another input string.
4.How to implement Autocloseable in java?
5. How to create threads in java?


WAP to print 1-50 if number divisible by 3 Print Manhattan if div by 5 print Associate or if div by both 3 and 5 print Manhattan Associate

Written Questions:
1) Program to Convert String to Integer without using Integer Parseint.
2) Program to read the data from file and remove ' ' and \n and duplicates from the string.
3) Program to print Manhattan (if no. is multiple of 3) print Associates(if no. is multiple of 5) and Manhattan Associates (if no is multiple of both 3 and 5)
4) 3 questions related to inner joins.

In interview:
1) How do you handle exceptions in your project?
2) Which server do you use i your project?
3) Why main method is static?
4) What is encapsulation?
5) Have you ever used git and which version control is used in your project?
6) What is the difference between string buffer and string builder?
7) Write exception hierarchy and how do you get to know in your code that where is error?
8) Which exceptions and errors have you faced in your project and how did you fixed them?

Comparator, Interface, etc

difference between runtime and compile time polymorphism
difference between 'exists' and 'in' SQL
Where EXISTS (Sub-Query)

Example:

SELECT emp.*

FROM employees e

WHERE EXISTS (SELECT 1 FROM departments dep WHERE dep.dept_id = 10);


WHERE expression IN (Value 1, Value 2,…Value N)

Example:

SELECT emp.*

FROM employees emp

WHERE emp.dept_id IN (20, 30);


Questions on Java 8 , J2EE , web security , Spring framework and logical thinking.

1 round : (i)Basic of Java and multithreading , String operation related questions & micro services architecture.
(ii)they asked one puzzle also, I solved mathematically but since interviewer cram the answer , by mistake he changed question hence he was telling my answer wrong ;-)
(iii) Then basic question on spring boot and web services
(iv) some small programs base on arrays , star patterns.
2 round : It was totally on architecture and design level of applications . Then few design patterns and my all projects . This interview round was continue till 1.5 hours.
3 round : It was from director and he asked some realtime problems and then few design and architecture level design questions.

write a recursive program to add digits of a number.
1 Answer
How can you add more than two attributes as a primary key





////////
OFSS preperation

8 primitive data types
1. Program to find all the patterns of 0(1+)0 in the given string
2. Program to replace all 0's with 1 in a given integer
Given a list of integers, return the most frequent item in the list.
Jersey client implementation
linked list queue
Tree and Linked List Implementation




1. What is the difference between EXIST and IN
Add Answer
Q2. What is an INDEX , PARTITION , How does it improve query performance
Add Answer
Q3. Remove Duplicates using analytical functions
Add Answer
Q4. Briefly describe the Oracle DB Architecture
Add Answer
Q5. ANSI JOINS vs Oracle JOINS
Add Answer
Q6. Questions using substr() , instr()



//Java Accenture

//refer AccentureQuestionPratise.java

//stream vs paralel stream
https://www.geeksforgeeks.org/parallel-vs-sequential-stream-in-java/
Sequential Stream
  Sequential Streams are non-parallel streams that use a single thread to process the pipelining.
  Any stream operation without explicitly specified as parallel is treated as a sequential stream.
  Sequential stream’s objects are pipelined in a single stream on the same processing system hence it never
  takes the advantage of the multi-core system even though the underlying system supports parallel execution.
  Sequential stream performs operation one by one.

stream() method returns a sequential stream in Java.

    public static void main(String[] args)
    {
        // create a list
        List<String> list = Arrays.asList( "Hello ",
                          "G", "E", "E", "K", "S!");
         // we are using stream() method
         // for sequential stream
         // Iterate and print each element
         // of the stream
        list.stream().forEach(System.out::print);
    }
}
Output
Hello GEEKS!

Parallel Stream
  It is a very useful feature of Java to use parallel processing, even if the whole program may not be parallelized.
  Parallel stream leverage multi-core processors, which increases its performance. Using parallel streams, our code
  gets divide into multiple streams which can be executed parallelly on separate cores of the system and the final result
  is shown as the combination of all the individual core’s outcomes. It is always not necessary that the whole program be
  parallelized, but at least some parts should be parallelized which handles the stream. The order of execution is not under our control
  and can give us unpredictably unordered results and like any other parallel programming, they are complex and error-prone.

 public static void main(String[] args)
    {
        // create a list
        List<String> list = Arrays.asList("Hello ",
                         "G", "E", "E", "K", "S!");

        // using parallelStream()
        // method for parallel stream
        list.parallelStream().forEach(System.out::print);
    }
}
Output
ES!KGEHello


1. How to make a List as Read Only List?
        Collections.unmodifiableList(testList);

2. Difference between iterator and list iterator?
       Iterator works in forward iteration
       List iterator in both direction


3. What design patterns you know in Java?
    Builder design pattern (build objects irrespective of argument order and numbers)
    factory design pattern
    singleton design pattern
    facade design pattern //structural
    prototype design pattern

4. What is a Singleton class?
5. Difference between String builder and String buffer?
        StringBuffer is synchronized, StringBuilder is not hence faster.
6. How to remove duplicate elements from a list in java?
              1)          list.stream()
                                  .distinct()
                                  .collect(Collectors.toList());
            2)Set<String> set = new HashSet<>(yourList);
              yourList.clear();
              yourList.addAll(set); //ordering of element is removed hence use linkedhashset
              **
                Set<T> set = new LinkedHashSet<>();
                    // Add the elements to set
                    set.addAll(list);
                    // Clear the list
                    list.clear();
                    // add the elements of set
                    // with no duplicates to the list
                    list.addAll(set);
  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **  **
7. How to clone objects?

class DB implements Cloneable{
    /*Below program explains that If you will try to Clone an object
     which doesn’t implement the Cloneable interface,
     it will CloneNotSupportedException, which you may want to handle
      & make the Object.clone() method legal*/

    //original object is still intact and can modify new object

    private List<String> subsidiaryCompanies;

    public DB(){
        subsidiaryCompanies = new ArrayList<>();
    }

    public DB(List<String> list){
        this.subsidiaryCompanies = list;
    }

    public void insertNewAquiredCompany(){
        subsidiaryCompanies.add("Infraview");
        subsidiaryCompanies.add("DB Systel");
    }

    public List<String> getSubsidiaryCompanies() {
        return subsidiaryCompanies;
    }

    @Override
    public Object clone()throws CloneNotSupportedException {
        List<String> tempList = new ArrayList<>();
        //deep copying
        for(String company:this.getSubsidiaryCompanies()){
            tempList.add(company);
        }

        return new DB(tempList);
    }
}

//shallow vs deep cloning
https://www.geeksforgeeks.org/deep-shallow-lazy-copy-java-examples/#:~:text=In%20shallow%20copy%2C%20only%20fields,as%20well%20as%20object%20references.

8. What are the methods in object class?
            wait
            equals
            hashCode
            clone

9. What are implicit objects in JSP? NA
10. How to open a database connection? How the application understands from where the query is to be read?
 Connection conn = null;
    try {
      String url = "jdbc:sqlite:path-to-db-file/chinook/chinook.db";
      conn = DriverManager.getConnection(url);

      Statement stmt = null;
      String query = "select * from albums";
      try {
          stmt = conn.createStatement();
          ResultSet rs = stmt.executeQuery(query);
          while (rs.next()) {
              String name = rs.getString("title");
              System.out.println(name);
          }
      } catch (SQLException e ) {
          throw new Error("Problem", e);
      } finally {
          if (stmt != null) { stmt.close(); }
      }

    } catch (SQLException e) {
        throw new Error("Problem", e);
    } finally {
      try {
        if (conn != null) {
            conn.close();
        }
      } catch (SQLException ex) {
          System.out.println(ex.getMessage());
      }
    }


11. Can you write a query in JSP file or a controller?

12. What is MVC in your application?
    MVC architecture mainly define structure for interaction Model (entity)
    View for user controller  Model and View components to process all the business logic and incoming requests

13. How to use Log4j logger?

    static Logger log = Logger.getLogger(Example.class.getName());
    public static void main(String[] args)throws IOException,SQLException{
      log.debug("Hello this is a debug message");
      log.info("Hello this is an info message");
    }

   # Define the root logger with appender file
   log = /usr/home/log4j
   log4j.rootLogger = DEBUG, FILE

   # Define the file appender
   log4j.appender.FILE=org.apache.log4j.FileAppender
   log4j.appender.FILE.File=${log}/log.out

   # Define the layout for file appender
   log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
   log4j.appender.FILE.layout.conversionPattern=%m%n

14. What are the log levels?
        OFF	0
        FATAL	100
        ERROR	200
        WARN	300
        INFO	400
        DEBUG	500
        TRACE	600
        ALL	Integer.MAX_VALUE

15. What is Spring bean definition?
        define bean instances
        @BEan
        <bean>

16. What is a bean life cycle?

17. What are the Spring bean scopes?

18. What is final keyword in Java?
        value not changes
19. What is a front controller?

20. What is the difference between forward and redirect in Spring MVC?
21. What are servlets?
        A servlet is simply a class which responds to a particular type of network request
        - most commonly an HTTP request. Basically servlets are usually used to implement web applications
        - but there are also various frameworks which operate on top of servlets (e.g. Struts) to give a higher-level
        abstraction than the "here's an HTTP request, write to this HTTP response" level which servlets provide.

        Servlets run in a servlet container which handles the networking side (e.g. parsing an HTTP request,
        connection handling etc). One of the best-known open source servlet containers is Tomcat.

https://www.geeksforgeeks.org/commonly-asked-java-programming-interview-questions-set-2/

Can we Overload or Override static methods in Java?
Overload yes
Override No (method hiding)
https://www.geeksforgeeks.org/can-we-overload-or-override-static-methods-in-java/

Why the main method is static in java?
    JVM can call wihout making instance
What happens if you remove static modifier from the main method?
    Program throws "NoSuchMethodError" error at runtime .

What is the scope of variables in Java in following cases?
What is “this” keyword in java?
    https://www.geeksforgeeks.org/this-reference-in-java/
What is an abstract class? How abstract classes are similar or different in Java from C++?
    gives partial abstraction, help in extending and overriding methods
    https://beginnersbook.com/2013/05/java-abstract-class-method/

Which class is the superclass for every class?
    Can we overload main() method?
    Yes, We can overload the main method in java but JVM only calls the original main method, it will never call our
    overloaded main method. Output: ... So, to execute overloaded methods of main, we must call them from the original main method
What is object cloning?
public class Deletable implements Cloneable{

    private String str;
    public Deletable(){
    }
    public void setStr(String str){
        this.str = str;
    }
    public void display(){
        System.out.println("The String is "+str);
    }
    protected Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}
and wherever you want to get another object, simple perform cloning. e.g:

Deletable del = new Deletable();
Deletable delTemp = (Deletable ) del.clone(); // this line will return you an independent
                                 // object, the changes made to this object will
                                 // not be reflected to other object
  ////////////////////////////////////////////////////////////////////////////////////////////


How is inheritance in C++ different from Java?
Why method overloading is not possible by changing the return type in java?
No
Lets say you have two methods
Method 1 : int add(int a, int b) ;
Method 2 : string add(int a, int b) ;
1st one returns the sum of numbers as numeric integers as 1,2,3..
2nd one returns the sum in words as one, two, three..
Now just for a moment imagine you are a computer and you have to give the output of add(4,5);

Its confusing for you too to know which method to use and you will ask me which one to use, same happens with the compiler and it produces an error like ambiguous function call which is kind of asking only which method to use.
I understand that you might be thinking like the return type should be enough for the compiler to decide which method to call, like int a=add(4,5); should call the first, and string a=add(4,5); should call the second one.

But that would also create a problem when the compiler has to do a auto type casting.

I think the best way would be that the return type of all methods should be object and base on the programmer requirements the resul can be down casted.

I don't remember but python has implemented this. But thats not the case for java.


Can we override private methods in Java?
https://www.geeksforgeeks.org/can-override-private-methods-java/
We get compiler error “fun() has private access in Base” (See this). So the
compiler tries to call base class function, not derived class, means fun() is not overridden.

What is blank final variable?
The blank final variable in Java is a final variable that is not initialized while declaration, instead they are
 initialized in a constructor. Java compiler will complain if a blank final variable is not initialized during construction.

What is “super” keyword in java?
    keyword to access parent class constrcutor and members
What is static variable in Java?
 When you want to have a variable that describes something about the class itself,
 not the individual objects of that class, make it static .
 When you want to have a variable that always has the same value for every object of
 the class, forever and ever, make it static
Differences between HashMap and HashTable in Java.

Hashmap vs Hashtable
1. HashMap is non-synchronized. It is not thread-safe and can’t be shared between many threads without proper synchronization code whereas Hashtable is
synchronized. It is thread-safe and can be shared with many threads.
2. HashMap allows one null key and multiple null values whereas Hashtable doesn’t allow any null key or value.
3. HashMap is generally preferred over HashTable if thread synchronization is not needed
Why HashTable doesn’t allow null and HashMap do?
To successfully store and retrieve objects from a HashTable, the objects used
as keys must implement the hashCode method and the equals method. Since null is not an
object, it can’t implement these methods. HashMap is an advanced version and improvement on the Hashtable.

How are Java objects stored in memory?




-> Which java version ? tell new features of Java 11.
    Running Java File with single command.
    New utility methods in String class.
    Local-Variable Syntax for Lambda Parameters.
    Nested Based Access Control.
    JEP 321: HTTP Client.
    Reading/Writing Strings to and from the Files.
    JEP 328: Flight Recorder.

-> What are comparator and comparable
write program.
Use Comparable:

if the object is in your control.
if the comparing behaviour is the main comparing behaviour.
Use Comparator :

if the object is outside your control and you cannot make them implement Comparable.
when you want comparing behaviour different from the default (which is specified by Comparable) behaviour.

-> Atomic keyword vs volatile keyword
Atomic -> In multithreadung Compare and swap else would have use synchrponized blocking other thread
Volatile -> updtae state of all the thread irresepective of cache

https://stackoverflow.com/questions/2307283/what-does-olog-n-mean-exactly#:~:text=Logarithmic%20running%20time%20(%20O(log,an%20O(log%20n)%20time

-> internal implementation of hashmap

-> Can null key accepted in hashmap then how to get it's null key value
-> Left join example
->what is service discovery in microservices

//what happen if we access hashmap like concurrent hashmap in multiple thread
If you are first populating that map and from then on only reading it, and never changing
 it, then you don't need to synchronize for mutual exclusion. However, without syncing there's
 still a possibility that not all the populating thread's
writes will be seen by reads from other threads. You're best of to just synchronize all access to the map.


->How to make a List as Read Only List?
-> Difference between iterator and list iterator?

->What is Immutable class
.write in program with one HashMap as variable

-> void keyword vs Void class
 Void class can neither be instantiated nor extended.

Have you worked on Webservices.

API vs webservices

->What is REST,

->what is state in REST

-> Is REST stateful or stateless?

->how you write test cases for REST end points

do you what is idepotent in REST, which of the methods in REST are idempotent.,

When do you need @ResponseStatus annotation
   mark method and exception class with status resaon

   @Order(Ordered.HIGHEST_PRECEDENCE)
   @ControllerAdvice
   @Slf4j
   public class RestExceptionHandler extends ResponseEntityExceptionHandler {

       @ExceptionHandler(value = Exception.class)
       protected ResponseEntity<Object> exceptionHandler(Exception ex, WebRequest request) {
           InboxError apiError = new InboxError(INTERNAL_SERVER_ERROR);
           apiError.setMessage("Unexpected exception occurred.");
           apiError.setDebugMessage(ex.getMessage());
           logger.error("Unexpected exception occurred.", ex);
           return buildResponseEntity(apiError);
       }

       @ExceptionHandler(value = InboxException.class)
       protected ResponseEntity<Object> exceptionHandler(InboxException ex, WebRequest request) {
           InboxError apiError = new InboxError(NOT_FOUND);
           apiError.setMessage("Unexpected inbox exception occurred.");
           apiError.setDebugMessage(ex.getMessage());
           logger.error("Unexpected inbox exception occurred.", ex);
           return buildResponseEntity(apiError);
       }
}

@Data
@JsonTypeInfo(include = JsonTypeInfo.As.WRAPPER_OBJECT, use = JsonTypeInfo.Id.CUSTOM, property = "error", visible = true)
@JsonTypeIdResolver(LowerCaseClassNameResolver.class)
public class InboxError {
    private HttpStatus status;
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy hh:mm:ss")
    private LocalDateTime timestamp;
    private String message;
    private String debugMessage;

    private InboxError() {
        timestamp = LocalDateTime.now();
    }

    InboxError(HttpStatus status) {
        this();
        this.status = status;
    }

    InboxError(HttpStatus status, Throwable ex) {
        this();
        this.status = status;
        this.message = "Unexpected error";
        this.debugMessage = ex.getLocalizedMessage();
    }

    InboxError(HttpStatus status, String message, Throwable ex) {
        this();
        this.status = status;
        this.message = message;
        this.debugMessage = ex.getLocalizedMessage();
    }
}

class LowerCaseClassNameResolver extends TypeIdResolverBase {

    @Override
    public String idFromValue(Object value) {
        return value.getClass().getSimpleName().toLowerCase();
    }

    @Override
    public String idFromValueAndType(Object value, Class<?> suggestedType) {
        return idFromValue(value);
    }

    @Override
    public JsonTypeInfo.Id getMechanism() {
        return JsonTypeInfo.Id.CUSTOM;
    }
}


Q. Can class run without main method
A. Yes You can compile and execute without main method By using static block. But after static block executed (printed) you will get an error saying no main method found.

And Latest INFO --> YOU cant Do this with JAVA 7 version. IT will not execute.

{
    static
    {
        System.out.println("Hello World!");
        System.exit(0); // prevents “main method not found” error
    }
}

Q. Is it possible to have different eturn type in overloaded method
A. In a class, there can be several methods sharing the same name but differ in

Parameter types
Number of parameters
Order of the parameters declared in the method
By depending on the parameters provided for the method, in the run time, compiler determines which version of the method to execute.

An overloaded method may or may not have different return types. But return type alone is not sufficient for the compiler to determine which method is to be executed at run time.

*************************************************************
Is REST secure? What can you do to secure it?


can you have REST api in protocols other then Http?

differences between @Controller and @RestController

->How to hanle out of memory _-> increase heap size and prefer streaming output thrn

->Hash map vs Concurrent hash map

->how to read value from properties in spring

->Internal working of hashmap

->Program to read the data from file and remove ' ' and \n and duplicates from the string.

->Difference between String builder and String buffer?
-> How to remove duplicate elements from a list in java?
-> How to clone objects?

Can we overload main() method? yes (but first main will be called)


What happens if you remove static modifier from the main method? (if static modifier is removed from the signature of the main method?
Ans. Program throws "NoSuchMethodError" error at runtime .)


[2,5,6,3,1]


[90, 36, 30, 60, 180]



 How to use Log4j logger?


1)  Product of Array Except Self

2)  Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.

Write a SQL query to find employees who have the highest salary in each of the departments. For the above tables, your SQL query should return the following rows (order of rows does not matter).

+------------+----------+--------+
| Department | Employee | Salary |
+------------+----------+--------+
| IT         | Max      | 90000  |
| IT         | Jim      | 90000  |
| Sales      | Henry    | 80000  |
+------------+----------+--------+


GE Interview:

GE India Interview Questions
Difficulty Level : Hard
Below is the list of Questions asked in GE interview for a java developer:

Refer: GeInterviewQuestionPractise.java

1. How to find the 3rd element from end in linked list in Java (Java Program to find the Nth Node from
tail in linked list)
2. Write producer consumer problem?
3. wait, notify and notifyall use of methods?

  // wait, notify and notifyall use of methods?
      // A thread which goes into waiting state by calling wait()
      // method will be in waiting state until any other thread calls
      // either notify() or notifyAll() method on the same object.

      Notification to number of threads : We can use notify() method to give the notification for only one thread which is waiting for a particular object whereas by the help of notifyAll() methods we can give the notification to all waiting threads of a particular object.
      Notifying a thread by JVM : If multiple threads are waiting for the notification and we use notify() method then only one thread get the notification and the remaining thread have to wait for further notification. Which thread will get the notification we can’t expect because it totally depends upon the JVM. But when we use notifyAll() method then multiple threads got the notification but execution of threads will be performed one by one because thread requires lock and only one lock is available for one object.
      Interchangeability of threads : We should go for notify() if all your waiting threads are interchangeable (the order they wake up doesn’t matter). A common example is a thread pool. But we should use notifyAll() for other cases where the waiting threads may have different purposes and should be able to run concurrently. An example is a maintenance operation on a shared resource, where multiple threads are waiting for the operation to complete before accessing the resource.

4. Why wait, notify and notifyall are declared in Object class?
//to notify ther threads
For better understanding why wait() and notify() method belongs to Object class, I'll give you a real life example: Suppose a gas station has a single toilet, the key for which is kept at the service desk. The toilet is a shared resource for passing motorists. To use this shared resource the prospective user must acquire a key to the lock on the toilet. The user goes to the service desk and acquires the key, opens the door, locks it from the inside and uses the facilities.

Meanwhile, if a second prospective user arrives at the gas station he finds the toilet locked and therefore unavailable to him. He goes to the service desk but the key is not there because it is in the hands of the current user. When the current user finishes, he unlocks the door and returns the key to the service desk. He does not bother about waiting customers. The service desk gives the key to the waiting customer. If more than one prospective user turns up while the toilet is locked, they must form a queue waiting for the key to the lock. Each thread has no idea who is in the toilet.

Obviously in applying this analogy to Java, a Java thread is a user and the toilet is a block of code which the thread wishes to execute. Java provides a way to lock the code for a thread which is currently executing it using the synchronized keyword, and making other threads that wish to use it wait until the first thread is finished. These other threads are placed in the waiting state. Java is NOT AS FAIR as the service station because there is no queue for waiting threads. Any one of the waiting threads may get the monitor next, regardless of the order they asked for it. The only guarantee is that all threads will get to use the monitored code sooner or later.

Finally the answer to your question: the lock could be the key object or the service desk. None of which is a Thread.

However, these are the objects that currently decide whether the toilet is locked or open. These are the objects that are in a position to notify that the bathroom is open (“notify”) or ask people to wait when it is locked wait.

Share

5. Can Notify be called after wait?
    Therefore, if a thread calls notify() before/after the thread to
    signal has called wait(), the signal will be missed by the waiting thread.
    This may or may not be a problem, but in some cases this may result
    in the waiting thread waiting forever, never waking up, because the signal
    to wake up was missed
6. find max occurring char from a char array?
7. What is significance of Spring?
8. what is loose coupling?
9. What is dependency injection?
10. how to use dependency injection?
11. Suppose a validator interface is there, 3 validators are implementing the interface.
    There is a service to use one of the validators. How to do that?
    @Component(value="DValidator")
        public class DateValidator implements validator {

            public boolean validate() {
                return true;
            }
        }`

    @Component(value="CValidator")
    public class CurrencyValidator implements validator {

        public boolean validate() {
            return true;
        }
    }
    @Component(value="EValidator")
    public class EmailValidator implements validator {

        public boolean validate() {
            return true;
        }
    }
    @Component
    public class CustomerService {

        WRONG  //NoUniqueBeanDefinitionException
        @Autowired
        private Validator valid;//will thorugh exception

        RIGHT
          @Qualifier("EValidator")
           @Autowired
        private Validator valid;// will work
    }

    //hence define @Qualifier for same bean


12. how to limit the scope in a spring bean to only 2 bean instance per Spring IoC container?
        make two singleton bean nd use it through qualifier

13. suppose there is a service having 3 tasks, how to complete these tasks through 3 threads and return
the combined result back to the service?


14. write the program using fork join pool?
15. write the program using callable interface?
16. write the program using executor framework?
17. difference between notify and notifyall?
18. how will you write programs using threads in such a manner that it should not throw outOfMemory
error?
19. what is callback method in jquery?
20. document.ready in jquery?
21. what is the difference between import package.* and import package.classname?
22. what is class loader?
23. suppose there are 3 colours(Black, Red and Yellow) and each colour signifies a fruit having some
properties. what design pattern to use here ?



//**********************************************************************************************************


Multithreading:

What are the advantages of Multithreading?

What are the disadvantages of Multithreading?

What is a Thread in Java?

What is the priority of a Thread and how it is used in scheduling?

What is the default priority of a thread in Java?

What are the three different priorities that can be set on a Thread in Java?

What are the differences between Pre-emptive Scheduling Scheduler and Time Slicing Scheduler?

What is the purpose of join() method in Thread class?

What is the fundamental difference between wait() and sleep() methods?

Is it possible to call run() method instead of start() on a thread in Java?

What is a daemon thread in Java?

How can we make a regular thread Daemon thread in Java?

How will you make a user thread into daemon thread if it has already started?

Can we start a thread two times in Java?

What is a Shutdown hook in Java?

In what scenarios can we interrupt a thread?

What is synchronization in Java?

What is the purpose of Synchronized block in Java?

What is static synchronization?

In Java, is it possible to lock an object for exclusive use by a thread?

How notify() method is different from notifyAll() method?

What is a Deadlock situation?

What is the meaning of concurrency?

What is the main difference between process and thread?

What is a process and thread in the context of Java?

What is a Scheduler?

What is the minimum number of Threads in a Java program?

What are the properties of a Java thread?

What are the different states of a Thread in Java?

How will you set the priority of a thread in Java?

What is the purpose of Thread Groups in Java?

Why we should not stop a thread by calling its stop() method?

How will you create a Thread in Java?

How can we stop a thread in the middle of execution in Java?

How do you access the current thread in a Java program?

What is Busy waiting in Multi-threading?

How can we prevent busy waiting in Java?

Can we use Thread.sleep() method for real-time processing in Java?

Can we wake up a thread that has been put to sleep by using Thread.sleep() method?

What are the two ways to check if a Thread has been interrupted?

How can we make sure that Parent thread waits for termination of Child thread?

Collections:

What are the main benefits of Collections Framework in Java?

Q: What is the root interface of Collection hierarchy in Java?

A: The root interface of Collection hierarchy in Java is Collection interface.
    But the Collection interface extends Iterable interface. Due to this some people consider Iterable interface as the root interface.
    Iterable interface is present in java.lang package but Collection interface is present in java.util package. Oracle Java API docs mention that Collection interface is a member of the Java Collections framework.
    Whereas, Iterable interface is not stated as a part of Java Collections framework in Java docs.
    Due to this Collection interface is the root of Collections Framework.

What are the main differences between Collection and Collections?

What are the Thread-safe classes in Java Collections framework?

How will you efficiently remove elements while iterating a Collection?

How will you convert a List into an array of integers like- int[]?

How will you convert an array of primitive integers int[] to a List collection?

How will you run a filter on a Collection?

How will you convert a List to a Set?

How will you remove duplicate elements from an ArrayList?

How can you maintain a Collection with elements in Sorted order?

What is the difference between Collections.emptyList() and creating new instance of Collection?

How will you copy elements from a Source List to another list?

What are the Java Collection classes that implement List interface?

What are the Java Collection classes that implement Set interface?

What is the difference between an Iterator and ListIterator in Java?

What is the difference between Iterator and Enumeration?

What are the differences between the two data structures: a Vector and an ArrayList?

What are the differences between Collection and Collections in Java?

What is the difference between an ArrayList and a LinkedList data structure?

In which scenario, LinkedList is better than ArrayList in Java?

What are the differences between a List and Set collection in Java?

What is the difference between a Set and a Map in Java?

What are the differences between a HashSet and TreeSet collection in Java?

In Java, how will you decide when to use a List, Set or a Map collection?

What is the use of a Dictionary class?

What is the default size of load factor in a HashMap collection in Java?

What is the significance of load factor in a HashMap in Java?

What are the major differences between a HashSet and a HashMap?

What are the differences between a HashMap and a Hashtable in Java?

What are the similarities between a HashSet and a HashMap in Java?

What are the differences between a HashMap and a TreeMap?

What are the differences between Comparable and Comparator?

In Java, what is the purpose of Properties file?

What is the reason for overriding equals() method?

How does hashCode() method work in Java?

How can we synchronize the elements of a List, a Set or a Map?

Is it a good idea to use Generics in collections?

Q: How to make Finally block to skipping execution.
A: The finally block follows a try block or a catch block. A finally block of
code always executes, irrespective of occurrence of an Exception. You cannot skip the
execution of the final block. Still if you want to do it forcefully when an exception occurred,
the only way is to call the System.exit(0) method, at the end of the catch block which is just before the finally block.

Example
public class FinallyExample {
   public static void main(String args[]) {
      int a[] = {21, 32, 65, 78};
      try {
         System.out.println("Access element three :" + a[5]);
      } catch (ArrayIndexOutOfBoundsException e) {
         System.out.println("Exception thrown :" + e);
         System.exit(0);
      } finally {
         a[0] = 6;
         System.out.println("First element value: " + a[0]);
         System.out.println("The finally statement is executed");
      }
   }
}
Output
Exception thrown
:java.lang.ArrayIndexOutOfBoundsException: 5

Q: Can i use TCP for REST
A:HTTP is a TCP/IP based protocol. So when you use REST you are
already using TCP for communication. But if you want to
use REST over pure TCP socket, without HTTP,
 then no, this doesn't make sense because REST
 is based on HTTP verbs and headers. Those notions exist only in the HTTP protocol.


Q: can we use return in finally block

A: Yes
Yes you can write the return statement in a finally block and it will override the other return value.

EDIT:
For example in below code

public class Test {

    public static int test(int i) {
        try {
            if (i == 0)
                throw new Exception();
            return 0;
        } catch (Exception e) {
            return 1;
        } finally {
            return 2;
        }
    }

    public static void main(String[] args) {
        System.out.println(test(0));
        System.out.println(test(1));
    }
}
The output is always 2, as we are returning 2
from the finally block. Remember the finally always
executes whether there is a exception or not. So when
the finally block runs it will override the return
value of others. Writing return statements in finally
 block is not required, in fact you should not write
  it.

Q:How does hibernate know to persist data passed to the entity class via a setter?

The mechanism Hibernate use to generate query is call dirty checking. By default once you load an record from the database Hibernate
will store a snapshot of the entity in the persistence context and give you a managed entity.
At flush time the framework will check entity states (managed, transient or removed)
and make a diff between every managed entity properties and the corresponding snapshot
to generate insert, update and delete query .
This is the default dirty checking strategy, which have some CPU and memory footprint. You
can reduce it with some mechanism like the use of the @Imumutable annotation.
Another option is to use bytecode enhancement for automatic dirty check. With this
strategy each entity will keep record of what changed inside and at flush time Hibernate will just ask every entity what changed.


Q: caching in sprng jpa

The reason the code you have is not working is that @Cache is not intended to work that way.
 If you want to cache the results of a query method execution, the easiest way is to use Spring's caching abstraction.
interface PromotionServiceXrefRepository extends PagingAndSortingRepository<PromotionServiceXref, Integer> {

  @Query("…")
  @Cacheable("servicesByCustomerId")
  Set<PromotionServiceXref> findByCustomerId(int customerId);

  @Override
  @CacheEvict(value = "servicesByCustomerId", key = "#p0.customer.id")
  <S extends PromotionServiceXref> S save(S service);
}
This setup will cause results of calls to findByCustomerId(…) be cached by the customer identifier. Note, that we added an @CacheEvict to the overridden save(…) method, so that the cache we populate with the query method is evicted, whenever an entity is saved. This probably has to be propagated to the delete(…) methods as well.

Now you can go ahead an configure a dedicated CacheManager (see the reference documentation for details) to plug in whichever caching solution you prefer (using a plain ConcurrentHashMap here).

 @Configuration
 @EnableCaching
 class CachingConfig {

   @Bean
   CacheManager cacheManager() {

     SimpleCacheManager cacheManager = new SimpleCacheManager();
     cacheManager.addCaches(Arrays.asList(new ConcurrentMapCache("servicesByCustomerId)));

     return cacheManager;
   }
 }


Can we make a Hibernate Entity Class final?
Yes, you can make a Hibernate Entity class final, but that's not a good practice. Since Hibernate uses a proxy pattern for performance
improvement in the case of the lazy association, by making an entity final, Hibernate will no longer be able to use a proxy, because
 Java doesn't allow extension of the final class, thus limiting your performance improvement


Q: Can interface have body

 A: Yes

 From Java 8 you can define static methods in interfaces in addition to default methods.

 A static method is a method that is associated with the class in which it is defined rather than with any object. Every instance of the class shares its static methods.

 This makes it easier for you to organize helper methods in your libraries; you can keep static methods specific to an interface in the same interface rather than in a separate class.

 The following example defines a static method that retrieves a ZoneId object corresponding to a time zone identifier; it uses the system default time zone if there is no ZoneId object corresponding to the given identifier. (As a result, you can simplify the method getZonedDateTime)

 Here is code :

 public interface TimeClient {
    // ...
     static public ZoneId getZoneId (String zoneString) {
         try {
             return ZoneId.of(zoneString);
         } catch (DateTimeException e) {
             System.err.println("Invalid time zone: " + zoneString +"; using default time zone instead.");
             return ZoneId.systemDefault();
         }
     }

    default public ZonedDateTime getZonedDateTime(String zoneString) {
       return ZonedDateTime.of(getLocalDateTime(), getZoneId(zoneString));
    }
 }
