Aggregator Microservice Design Pattern
=>   The first, and probably the most common, is the aggregator
     microservice design pattern. In its simplest form, Aggregator
     would be a simple web page that invokes multiple services to
     achieve the functionality required by the application.

Proxy Microservice Design Pattern
=>  Proxy microservice design pattern is a variation of Aggregator.
    In this case, no aggregation needs to happen on the client but a different
    microservice may be invoked based upon the business need. Just like Aggregator,
    Proxy can scale independently on X-axis and Z-axis as well. You may like to do
    this where each individual service need not be exposed to the consumer and should
    instead go through an interface.

Chained Microservice Design Pattern
=> Chained microservice design pattern produce a single consolidated response to the request.
   In this case, the request from the client is received by Service A, which is then communicating
   with Service B, which in turn may be
   communicating with Service C. All the services are likely using a synchronous HTTP request/response messaging.

Branch Microservice Design Pattern
=> Branch microservice design pattern extends Aggregator design pattern and allows
   simultaneous response processing from two, likely mutually exclusive, chains of
   microservices. This pattern can also be used to call different chains, or a single
   chain, based upon the business needs.

Shared Data Microservice Design Pattern
=> One of the design principles of microservice is autonomy. That means the
service is full-stack and has control of all the components â€“ UI, middleware,
 persistence, transaction. This allows the service to be polyglot, and use the right
 tool for the right job. For example, if a NoSQL data store can be used if that is more
  appropriate instead of jamming that data in a SQL database.

Asynchronous Messaging Microservice Design Pattern
=>  While REST design pattern is quite prevalent, and well understood, but it has the limitation of being
    synchronous, and thus blocking. Asynchrony can be achieved but that is done in an
    application specific way. Some microservice architectures may elect to use message queues instead of REST
    request/response because of that."
